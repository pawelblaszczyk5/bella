/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root.tsx'
import { Route as AppRouteImport } from './routes/app.tsx'
import { Route as IndexRouteImport } from './routes/index.tsx'
import { Route as AppIndexRouteImport } from './routes/app.index.tsx'
import { Route as AppConversationIdRouteImport } from './routes/app.$conversation-id.tsx'
import { ServerRoute as ApiMessagesServerRouteImport } from './routes/api.messages.ts'
import { ServerRoute as ApiMessagePartsServerRouteImport } from './routes/api.message-parts.ts'
import { ServerRoute as ApiConversationsServerRouteImport } from './routes/api.conversations.ts'

const rootServerRouteImport = createServerRootRoute()

const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppConversationIdRoute = AppConversationIdRouteImport.update({
  id: '/$conversation-id',
  path: '/$conversation-id',
  getParentRoute: () => AppRoute,
} as any)
const ApiMessagesServerRoute = ApiMessagesServerRouteImport.update({
  id: '/api/messages',
  path: '/api/messages',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiMessagePartsServerRoute = ApiMessagePartsServerRouteImport.update({
  id: '/api/message-parts',
  path: '/api/message-parts',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiConversationsServerRoute = ApiConversationsServerRouteImport.update({
  id: '/api/conversations',
  path: '/api/conversations',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/$conversation-id': typeof AppConversationIdRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app/$conversation-id': typeof AppConversationIdRoute
  '/app': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/$conversation-id': typeof AppConversationIdRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/app' | '/app/$conversation-id' | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app/$conversation-id' | '/app'
  id: '__root__' | '/' | '/app' | '/app/$conversation-id' | '/app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/conversations': typeof ApiConversationsServerRoute
  '/api/message-parts': typeof ApiMessagePartsServerRoute
  '/api/messages': typeof ApiMessagesServerRoute
}
export interface FileServerRoutesByTo {
  '/api/conversations': typeof ApiConversationsServerRoute
  '/api/message-parts': typeof ApiMessagePartsServerRoute
  '/api/messages': typeof ApiMessagesServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/conversations': typeof ApiConversationsServerRoute
  '/api/message-parts': typeof ApiMessagePartsServerRoute
  '/api/messages': typeof ApiMessagesServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/conversations' | '/api/message-parts' | '/api/messages'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/conversations' | '/api/message-parts' | '/api/messages'
  id: '__root__' | '/api/conversations' | '/api/message-parts' | '/api/messages'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiConversationsServerRoute: typeof ApiConversationsServerRoute
  ApiMessagePartsServerRoute: typeof ApiMessagePartsServerRoute
  ApiMessagesServerRoute: typeof ApiMessagesServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/$conversation-id': {
      id: '/app/$conversation-id'
      path: '/$conversation-id'
      fullPath: '/app/$conversation-id'
      preLoaderRoute: typeof AppConversationIdRouteImport
      parentRoute: typeof AppRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/messages': {
      id: '/api/messages'
      path: '/api/messages'
      fullPath: '/api/messages'
      preLoaderRoute: typeof ApiMessagesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/message-parts': {
      id: '/api/message-parts'
      path: '/api/message-parts'
      fullPath: '/api/message-parts'
      preLoaderRoute: typeof ApiMessagePartsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/conversations': {
      id: '/api/conversations'
      path: '/api/conversations'
      fullPath: '/api/conversations'
      preLoaderRoute: typeof ApiConversationsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppRouteChildren {
  AppConversationIdRoute: typeof AppConversationIdRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppConversationIdRoute: AppConversationIdRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiConversationsServerRoute: ApiConversationsServerRoute,
  ApiMessagePartsServerRoute: ApiMessagePartsServerRoute,
  ApiMessagesServerRoute: ApiMessagesServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
